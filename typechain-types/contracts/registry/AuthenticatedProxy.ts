/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AuthenticatedProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "initialize"
      | "proxy"
      | "proxyAssert"
      | "receiveApproval"
      | "registry"
      | "revoked"
      | "setRevoke"
      | "upgradeabilityOwner"
      | "user"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ReceivedEther" | "ReceivedTokens" | "Revoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxy",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxyAssert",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveApproval",
    values: [AddressLike, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "revoked", values?: undefined): string;
  encodeFunctionData(functionFragment: "setRevoke", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "upgradeabilityOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "user", values?: undefined): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyAssert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRevoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeabilityOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "user", data: BytesLike): Result;
}

export namespace ReceivedEtherEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedTokensEvent {
  export type InputTuple = [
    from: AddressLike,
    value: BigNumberish,
    token: AddressLike,
    extraData: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    value: bigint,
    token: string,
    extraData: string
  ];
  export interface OutputObject {
    from: string;
    value: bigint;
    token: string;
    extraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokedEvent {
  export type InputTuple = [revoked: boolean];
  export type OutputTuple = [revoked: boolean];
  export interface OutputObject {
    revoked: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuthenticatedProxy extends BaseContract {
  connect(runner?: ContractRunner | null): AuthenticatedProxy;
  waitForDeployment(): Promise<this>;

  interface: AuthenticatedProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  initialize: TypedContractMethod<
    [addrUser: AddressLike, addrRegistry: AddressLike],
    [void],
    "nonpayable"
  >;

  proxy: TypedContractMethod<
    [dest: AddressLike, howToCall: BigNumberish, data: BytesLike],
    [boolean],
    "nonpayable"
  >;

  proxyAssert: TypedContractMethod<
    [dest: AddressLike, howToCall: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  receiveApproval: TypedContractMethod<
    [
      from: AddressLike,
      value: BigNumberish,
      token: AddressLike,
      extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  revoked: TypedContractMethod<[], [boolean], "view">;

  setRevoke: TypedContractMethod<[revoke: boolean], [void], "nonpayable">;

  upgradeabilityOwner: TypedContractMethod<[], [string], "view">;

  user: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [addrUser: AddressLike, addrRegistry: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxy"
  ): TypedContractMethod<
    [dest: AddressLike, howToCall: BigNumberish, data: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxyAssert"
  ): TypedContractMethod<
    [dest: AddressLike, howToCall: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveApproval"
  ): TypedContractMethod<
    [
      from: AddressLike,
      value: BigNumberish,
      token: AddressLike,
      extraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revoked"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setRevoke"
  ): TypedContractMethod<[revoke: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeabilityOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "user"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ReceivedEther"
  ): TypedContractEvent<
    ReceivedEtherEvent.InputTuple,
    ReceivedEtherEvent.OutputTuple,
    ReceivedEtherEvent.OutputObject
  >;
  getEvent(
    key: "ReceivedTokens"
  ): TypedContractEvent<
    ReceivedTokensEvent.InputTuple,
    ReceivedTokensEvent.OutputTuple,
    ReceivedTokensEvent.OutputObject
  >;
  getEvent(
    key: "Revoked"
  ): TypedContractEvent<
    RevokedEvent.InputTuple,
    RevokedEvent.OutputTuple,
    RevokedEvent.OutputObject
  >;

  filters: {
    "ReceivedEther(address,uint256)": TypedContractEvent<
      ReceivedEtherEvent.InputTuple,
      ReceivedEtherEvent.OutputTuple,
      ReceivedEtherEvent.OutputObject
    >;
    ReceivedEther: TypedContractEvent<
      ReceivedEtherEvent.InputTuple,
      ReceivedEtherEvent.OutputTuple,
      ReceivedEtherEvent.OutputObject
    >;

    "ReceivedTokens(address,uint256,address,bytes)": TypedContractEvent<
      ReceivedTokensEvent.InputTuple,
      ReceivedTokensEvent.OutputTuple,
      ReceivedTokensEvent.OutputObject
    >;
    ReceivedTokens: TypedContractEvent<
      ReceivedTokensEvent.InputTuple,
      ReceivedTokensEvent.OutputTuple,
      ReceivedTokensEvent.OutputObject
    >;

    "Revoked(bool)": TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;
    Revoked: TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;
  };
}
