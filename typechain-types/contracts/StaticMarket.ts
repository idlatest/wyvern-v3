/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface StaticMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ERC20ForERC721"
      | "ERC721ForERC20"
      | "anyERC1155ForERC20"
      | "anyERC20ForERC1155"
      | "anyERC20ForERC20"
      | "name"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ERC20ForERC721",
    values: [
      BytesLike,
      AddressLike[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721ForERC20",
    values: [
      BytesLike,
      AddressLike[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anyERC1155ForERC20",
    values: [
      BytesLike,
      AddressLike[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anyERC20ForERC1155",
    values: [
      BytesLike,
      AddressLike[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anyERC20ForERC20",
    values: [
      BytesLike,
      AddressLike[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ERC20ForERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721ForERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anyERC1155ForERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anyERC20ForERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anyERC20ForERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
}

export interface StaticMarket extends BaseContract {
  connect(runner?: ContractRunner | null): StaticMarket;
  waitForDeployment(): Promise<this>;

  interface: StaticMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ERC20ForERC721: TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;

  ERC721ForERC20: TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;

  anyERC1155ForERC20: TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;

  anyERC20ForERC1155: TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;

  anyERC20ForERC20: TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ERC20ForERC721"
  ): TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "ERC721ForERC20"
  ): TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "anyERC1155ForERC20"
  ): TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "anyERC20ForERC1155"
  ): TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "anyERC20ForERC20"
  ): TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
