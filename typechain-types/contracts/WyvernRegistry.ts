/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface WyvernRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DELAY_PERIOD"
      | "contracts"
      | "delegateProxyImplementation"
      | "endGrantAuthentication"
      | "grantInitialAuthentication"
      | "initialAddressSet"
      | "name"
      | "owner"
      | "pending"
      | "proxies"
      | "registerProxy"
      | "registerProxyFor"
      | "registerProxyOverride"
      | "renounceOwnership"
      | "revokeAuthentication"
      | "startGrantAuthentication"
      | "transferAccessTo"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "DELAY_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateProxyImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endGrantAuthentication",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantInitialAuthentication",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialAddressSet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pending",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerProxyFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProxyOverride",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuthentication",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startGrantAuthentication",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAccessTo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELAY_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateProxyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endGrantAuthentication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantInitialAuthentication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialAddressSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pending", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProxyFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProxyOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAuthentication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startGrantAuthentication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAccessTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WyvernRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): WyvernRegistry;
  waitForDeployment(): Promise<this>;

  interface: WyvernRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DELAY_PERIOD: TypedContractMethod<[], [bigint], "view">;

  contracts: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  delegateProxyImplementation: TypedContractMethod<[], [string], "view">;

  endGrantAuthentication: TypedContractMethod<
    [addr: AddressLike],
    [void],
    "nonpayable"
  >;

  grantInitialAuthentication: TypedContractMethod<
    [authAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  initialAddressSet: TypedContractMethod<[], [boolean], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pending: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  proxies: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  registerProxy: TypedContractMethod<[], [string], "nonpayable">;

  registerProxyFor: TypedContractMethod<
    [user: AddressLike],
    [string],
    "nonpayable"
  >;

  registerProxyOverride: TypedContractMethod<[], [string], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeAuthentication: TypedContractMethod<
    [addr: AddressLike],
    [void],
    "nonpayable"
  >;

  startGrantAuthentication: TypedContractMethod<
    [addr: AddressLike],
    [void],
    "nonpayable"
  >;

  transferAccessTo: TypedContractMethod<
    [from: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DELAY_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "contracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "delegateProxyImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "endGrantAuthentication"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantInitialAuthentication"
  ): TypedContractMethod<[authAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialAddressSet"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pending"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxies"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "registerProxy"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "registerProxyFor"
  ): TypedContractMethod<[user: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "registerProxyOverride"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeAuthentication"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startGrantAuthentication"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferAccessTo"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
