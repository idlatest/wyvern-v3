/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface StaticUtilInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "and"
      | "any"
      | "anyAddOne"
      | "anyNoFill"
      | "anySingle"
      | "atomicizer"
      | "dumbSequenceExact"
      | "or"
      | "sequenceAnyAfter"
      | "sequenceExact"
      | "split"
      | "splitAddOne"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "and",
    values: [
      BytesLike,
      AddressLike[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "any",
    values: [
      BytesLike,
      AddressLike[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anyAddOne",
    values: [
      BytesLike,
      AddressLike[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anyNoFill",
    values: [
      BytesLike,
      AddressLike[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anySingle",
    values: [BytesLike, AddressLike[], BigNumberish, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "atomicizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dumbSequenceExact",
    values: [
      BytesLike,
      AddressLike[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "or",
    values: [
      BytesLike,
      AddressLike[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sequenceAnyAfter",
    values: [BytesLike, AddressLike[], BigNumberish, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sequenceExact",
    values: [BytesLike, AddressLike[], BigNumberish, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "split",
    values: [
      BytesLike,
      AddressLike[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "splitAddOne",
    values: [
      BytesLike,
      AddressLike[],
      [BigNumberish, BigNumberish],
      BigNumberish[],
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "and", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "any", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anyAddOne", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anyNoFill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anySingle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "atomicizer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dumbSequenceExact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "or", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sequenceAnyAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sequenceExact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "splitAddOne",
    data: BytesLike
  ): Result;
}

export interface StaticUtil extends BaseContract {
  connect(runner?: ContractRunner | null): StaticUtil;
  waitForDeployment(): Promise<this>;

  interface: StaticUtilInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  and: TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [void],
    "view"
  >;

  any: TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: AddressLike[],
      arg2: [BigNumberish, BigNumberish],
      arg3: BigNumberish[],
      arg4: BytesLike,
      arg5: BytesLike
    ],
    [bigint],
    "view"
  >;

  anyAddOne: TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: AddressLike[],
      arg2: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      arg4: BytesLike,
      arg5: BytesLike
    ],
    [bigint],
    "view"
  >;

  anyNoFill: TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: AddressLike[],
      arg2: [BigNumberish, BigNumberish],
      arg3: BigNumberish[],
      arg4: BytesLike,
      arg5: BytesLike
    ],
    [bigint],
    "view"
  >;

  anySingle: TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: AddressLike[],
      arg2: BigNumberish,
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [void],
    "view"
  >;

  atomicizer: TypedContractMethod<[], [string], "view">;

  dumbSequenceExact: TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      cdata: BytesLike,
      arg5: BytesLike
    ],
    [bigint],
    "view"
  >;

  or: TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [void],
    "view"
  >;

  sequenceAnyAfter: TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCall: BigNumberish,
      uints: BigNumberish[],
      cdata: BytesLike
    ],
    [void],
    "view"
  >;

  sequenceExact: TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCall: BigNumberish,
      uints: BigNumberish[],
      cdata: BytesLike
    ],
    [void],
    "view"
  >;

  split: TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;

  splitAddOne: TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "and"
  ): TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "any"
  ): TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: AddressLike[],
      arg2: [BigNumberish, BigNumberish],
      arg3: BigNumberish[],
      arg4: BytesLike,
      arg5: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "anyAddOne"
  ): TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: AddressLike[],
      arg2: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      arg4: BytesLike,
      arg5: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "anyNoFill"
  ): TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: AddressLike[],
      arg2: [BigNumberish, BigNumberish],
      arg3: BigNumberish[],
      arg4: BytesLike,
      arg5: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "anySingle"
  ): TypedContractMethod<
    [
      arg0: BytesLike,
      arg1: AddressLike[],
      arg2: BigNumberish,
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "atomicizer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dumbSequenceExact"
  ): TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      cdata: BytesLike,
      arg5: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "or"
  ): TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "sequenceAnyAfter"
  ): TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCall: BigNumberish,
      uints: BigNumberish[],
      cdata: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "sequenceExact"
  ): TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCall: BigNumberish,
      uints: BigNumberish[],
      cdata: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "split"
  ): TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "splitAddOne"
  ): TypedContractMethod<
    [
      extra: BytesLike,
      addresses: AddressLike[],
      howToCalls: [BigNumberish, BigNumberish],
      uints: BigNumberish[],
      data: BytesLike,
      counterdata: BytesLike
    ],
    [bigint],
    "view"
  >;

  filters: {};
}
