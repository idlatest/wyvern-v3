/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TestSmartContractWalletInterface extends Interface {
  getFunction(
    nameOrSignature: "approveOrder_" | "registerProxy" | "setApprovalForAll"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;

  encodeFunctionData(
    functionFragment: "approveOrder_",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProxy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveOrder_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    _from: AddressLike,
    _id: BigNumberish,
    _value: BigNumberish
  ];
  export type OutputTuple = [_from: string, _id: bigint, _value: bigint];
  export interface OutputObject {
    _from: string;
    _id: bigint;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TestSmartContractWallet extends BaseContract {
  connect(runner?: ContractRunner | null): TestSmartContractWallet;
  waitForDeployment(): Promise<this>;

  interface: TestSmartContractWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveOrder_: TypedContractMethod<
    [
      exchange: AddressLike,
      registry: AddressLike,
      maker: AddressLike,
      staticTarget: AddressLike,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      orderbookInclusionDesired: boolean
    ],
    [boolean],
    "nonpayable"
  >;

  registerProxy: TypedContractMethod<
    [registry: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [registry: AddressLike, erc721: AddressLike, approved: boolean],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveOrder_"
  ): TypedContractMethod<
    [
      exchange: AddressLike,
      registry: AddressLike,
      maker: AddressLike,
      staticTarget: AddressLike,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      orderbookInclusionDesired: boolean
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerProxy"
  ): TypedContractMethod<[registry: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [registry: AddressLike, erc721: AddressLike, approved: boolean],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
  };
}
