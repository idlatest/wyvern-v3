/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface WyvernExchangeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveOrderHash_"
      | "approveOrder_"
      | "approved"
      | "atomicMatch_"
      | "codename"
      | "fills"
      | "hashOrder_"
      | "hashToSign_"
      | "name"
      | "registries"
      | "setOrderFill_"
      | "validateOrderAuthorization_"
      | "validateOrderParameters_"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OrderApproved"
      | "OrderFillChanged"
      | "OrdersMatched"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveOrderHash_",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveOrder_",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approved",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "atomicMatch_",
    values: [
      BigNumberish[],
      [BytesLike, BytesLike],
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      [BigNumberish, BigNumberish],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "codename", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fills",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder_",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashToSign_",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registries",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderFill_",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOrderAuthorization_",
    values: [BytesLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOrderParameters_",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "approveOrderHash_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveOrder_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "atomicMatch_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "codename", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fills", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashOrder_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashToSign_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOrderFill_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOrderAuthorization_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOrderParameters_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace OrderApprovedEvent {
  export type InputTuple = [
    hash: BytesLike,
    registry: AddressLike,
    maker: AddressLike,
    staticTarget: AddressLike,
    staticSelector: BytesLike,
    staticExtradata: BytesLike,
    maximumFill: BigNumberish,
    listingTime: BigNumberish,
    expirationTime: BigNumberish,
    salt: BigNumberish,
    orderbookInclusionDesired: boolean
  ];
  export type OutputTuple = [
    hash: string,
    registry: string,
    maker: string,
    staticTarget: string,
    staticSelector: string,
    staticExtradata: string,
    maximumFill: bigint,
    listingTime: bigint,
    expirationTime: bigint,
    salt: bigint,
    orderbookInclusionDesired: boolean
  ];
  export interface OutputObject {
    hash: string;
    registry: string;
    maker: string;
    staticTarget: string;
    staticSelector: string;
    staticExtradata: string;
    maximumFill: bigint;
    listingTime: bigint;
    expirationTime: bigint;
    salt: bigint;
    orderbookInclusionDesired: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderFillChangedEvent {
  export type InputTuple = [
    hash: BytesLike,
    maker: AddressLike,
    newFill: BigNumberish
  ];
  export type OutputTuple = [hash: string, maker: string, newFill: bigint];
  export interface OutputObject {
    hash: string;
    maker: string;
    newFill: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrdersMatchedEvent {
  export type InputTuple = [
    firstHash: BytesLike,
    secondHash: BytesLike,
    firstMaker: AddressLike,
    secondMaker: AddressLike,
    newFirstFill: BigNumberish,
    newSecondFill: BigNumberish,
    metadata: BytesLike
  ];
  export type OutputTuple = [
    firstHash: string,
    secondHash: string,
    firstMaker: string,
    secondMaker: string,
    newFirstFill: bigint,
    newSecondFill: bigint,
    metadata: string
  ];
  export interface OutputObject {
    firstHash: string;
    secondHash: string;
    firstMaker: string;
    secondMaker: string;
    newFirstFill: bigint;
    newSecondFill: bigint;
    metadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WyvernExchange extends BaseContract {
  connect(runner?: ContractRunner | null): WyvernExchange;
  waitForDeployment(): Promise<this>;

  interface: WyvernExchangeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveOrderHash_: TypedContractMethod<
    [hash: BytesLike],
    [void],
    "nonpayable"
  >;

  approveOrder_: TypedContractMethod<
    [
      registry: AddressLike,
      maker: AddressLike,
      staticTarget: AddressLike,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      orderbookInclusionDesired: boolean
    ],
    [void],
    "nonpayable"
  >;

  approved: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  atomicMatch_: TypedContractMethod<
    [
      uints: BigNumberish[],
      staticSelectors: [BytesLike, BytesLike],
      firstExtradata: BytesLike,
      firstCalldata: BytesLike,
      secondExtradata: BytesLike,
      secondCalldata: BytesLike,
      howToCalls: [BigNumberish, BigNumberish],
      metadata: BytesLike,
      signatures: BytesLike
    ],
    [void],
    "payable"
  >;

  codename: TypedContractMethod<[], [string], "view">;

  fills: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;

  hashOrder_: TypedContractMethod<
    [
      registry: AddressLike,
      maker: AddressLike,
      staticTarget: AddressLike,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish
    ],
    [string],
    "view"
  >;

  hashToSign_: TypedContractMethod<[orderHash: BytesLike], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  registries: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  setOrderFill_: TypedContractMethod<
    [hash: BytesLike, fill: BigNumberish],
    [void],
    "nonpayable"
  >;

  validateOrderAuthorization_: TypedContractMethod<
    [hash: BytesLike, maker: AddressLike, signature: BytesLike],
    [boolean],
    "view"
  >;

  validateOrderParameters_: TypedContractMethod<
    [
      registry: AddressLike,
      maker: AddressLike,
      staticTarget: AddressLike,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish
    ],
    [boolean],
    "view"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveOrderHash_"
  ): TypedContractMethod<[hash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveOrder_"
  ): TypedContractMethod<
    [
      registry: AddressLike,
      maker: AddressLike,
      staticTarget: AddressLike,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish,
      orderbookInclusionDesired: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approved"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "atomicMatch_"
  ): TypedContractMethod<
    [
      uints: BigNumberish[],
      staticSelectors: [BytesLike, BytesLike],
      firstExtradata: BytesLike,
      firstCalldata: BytesLike,
      secondExtradata: BytesLike,
      secondCalldata: BytesLike,
      howToCalls: [BigNumberish, BigNumberish],
      metadata: BytesLike,
      signatures: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "codename"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fills"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashOrder_"
  ): TypedContractMethod<
    [
      registry: AddressLike,
      maker: AddressLike,
      staticTarget: AddressLike,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashToSign_"
  ): TypedContractMethod<[orderHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registries"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setOrderFill_"
  ): TypedContractMethod<
    [hash: BytesLike, fill: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateOrderAuthorization_"
  ): TypedContractMethod<
    [hash: BytesLike, maker: AddressLike, signature: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateOrderParameters_"
  ): TypedContractMethod<
    [
      registry: AddressLike,
      maker: AddressLike,
      staticTarget: AddressLike,
      staticSelector: BytesLike,
      staticExtradata: BytesLike,
      maximumFill: BigNumberish,
      listingTime: BigNumberish,
      expirationTime: BigNumberish,
      salt: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OrderApproved"
  ): TypedContractEvent<
    OrderApprovedEvent.InputTuple,
    OrderApprovedEvent.OutputTuple,
    OrderApprovedEvent.OutputObject
  >;
  getEvent(
    key: "OrderFillChanged"
  ): TypedContractEvent<
    OrderFillChangedEvent.InputTuple,
    OrderFillChangedEvent.OutputTuple,
    OrderFillChangedEvent.OutputObject
  >;
  getEvent(
    key: "OrdersMatched"
  ): TypedContractEvent<
    OrdersMatchedEvent.InputTuple,
    OrdersMatchedEvent.OutputTuple,
    OrdersMatchedEvent.OutputObject
  >;

  filters: {
    "OrderApproved(bytes32,address,address,address,bytes4,bytes,uint256,uint256,uint256,uint256,bool)": TypedContractEvent<
      OrderApprovedEvent.InputTuple,
      OrderApprovedEvent.OutputTuple,
      OrderApprovedEvent.OutputObject
    >;
    OrderApproved: TypedContractEvent<
      OrderApprovedEvent.InputTuple,
      OrderApprovedEvent.OutputTuple,
      OrderApprovedEvent.OutputObject
    >;

    "OrderFillChanged(bytes32,address,uint256)": TypedContractEvent<
      OrderFillChangedEvent.InputTuple,
      OrderFillChangedEvent.OutputTuple,
      OrderFillChangedEvent.OutputObject
    >;
    OrderFillChanged: TypedContractEvent<
      OrderFillChangedEvent.InputTuple,
      OrderFillChangedEvent.OutputTuple,
      OrderFillChangedEvent.OutputObject
    >;

    "OrdersMatched(bytes32,bytes32,address,address,uint256,uint256,bytes32)": TypedContractEvent<
      OrdersMatchedEvent.InputTuple,
      OrdersMatchedEvent.OutputTuple,
      OrdersMatchedEvent.OutputObject
    >;
    OrdersMatched: TypedContractEvent<
      OrdersMatchedEvent.InputTuple,
      OrdersMatchedEvent.OutputTuple,
      OrdersMatchedEvent.OutputObject
    >;
  };
}
