/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ProxyInterface,
  ProxyInterfaceInterface,
} from "../../../contracts/TestSmartContractWallet.sol/ProxyInterface";

const _abi = [
  {
    inputs: [],
    name: "registerProxy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50606d80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ddd81f8214602d575b600080fd5b60336035565b005b56fea2646970667358221220ff5b78e819afb2eb10a2fe417f6693eb6618af9afde26f24364c16d176b97acb64736f6c63430007050033";

type ProxyInterfaceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyInterfaceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProxyInterface__factory extends ContractFactory {
  constructor(...args: ProxyInterfaceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ProxyInterface & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ProxyInterface__factory {
    return super.connect(runner) as ProxyInterface__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyInterfaceInterface {
    return new Interface(_abi) as ProxyInterfaceInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ProxyInterface {
    return new Contract(address, _abi, runner) as unknown as ProxyInterface;
  }
}
